services:
  app:
    build:
      context: .
      dockerfile: deploy/Dockerfile.prod
    ports:
      - target: 8000
        published: 8000
        protocol: tcp
        mode: host
    volumes:
      - .:/src
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_PORT
      - POSTGRES_HOST
    depends_on:
      db:
        condition: service_healthy
    deploy:
      placement:
        constraints:
          - "node.labels.TAG==prod"
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 15s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/api/healthcheck || echo 1 # TODO
      interval: 30s
      timeout: 3s
      retries: 12

  db:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_PORT
    ports:
      - "5432:5432"
    volumes:
      - pgdata-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "$POSTGRES_DB", "-U", "$POSTGRES_USER" ]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - "node.labels.TAG==prod"
      replicas: 1
      update_config:
        parallelism: 1
        order: start-first
        failure_action: rollback
        delay: 15s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

volumes:
    pgdata-volume:
